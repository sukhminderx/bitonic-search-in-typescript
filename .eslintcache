[{"Z:\\SUKHI\\algo\\priority-queue-heap\\src\\index.tsx":"1","Z:\\SUKHI\\algo\\priority-queue-heap\\src\\reportWebVitals.ts":"2","Z:\\SUKHI\\algo\\priority-queue-heap\\src\\App.tsx":"3","Z:\\SUKHI\\algo\\priority-queue-heap\\src\\BitonicSearch\\index.ts":"4"},{"size":517,"mtime":1608712582382,"results":"5","hashOfConfig":"6"},{"size":440,"mtime":1608712582388,"results":"7","hashOfConfig":"6"},{"size":696,"mtime":1609155394967,"results":"8","hashOfConfig":"6"},{"size":1782,"mtime":1609156091091,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"xizf6u",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"Z:\\SUKHI\\algo\\priority-queue-heap\\src\\index.tsx",[],["20","21"],"Z:\\SUKHI\\algo\\priority-queue-heap\\src\\reportWebVitals.ts",[],"Z:\\SUKHI\\algo\\priority-queue-heap\\src\\App.tsx",[],"Z:\\SUKHI\\algo\\priority-queue-heap\\src\\BitonicSearch\\index.ts",["22","23","24","25","26"],"export class BitonicSearch {\r\n  constructor(list: Array<number>, val: number) {\r\n    console.log(list);\r\n    console.log(this.findBitonic(list, list.length, val));\r\n  }\r\n\r\n  // Function for binary search in ascending part of array\r\n  ascendingBinarySearch(\r\n    arr: Array<number>,\r\n    low: number,\r\n    high: number,\r\n    key: number\r\n  ) {\r\n    while (low <= high) {\r\n      let mid = low + (high - low) / 2;\r\n      if (arr[mid] == key) return mid;\r\n      if (arr[mid] > key) high = mid - 1;\r\n      else low = mid + 1;\r\n    }\r\n    return -1;\r\n  }\r\n  // Function for binary search in descending part of array\r\n  descendingBinarySearch(\r\n    arr: Array<number>,\r\n    low: number,\r\n    high: number,\r\n    key: number\r\n  ) {\r\n    while (low <= high) {\r\n      let mid = low + (high - low) / 2;\r\n      if (arr[mid] == key) return mid;\r\n      if (arr[mid] < key) high = mid - 1;\r\n      else low = mid + 1;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  findBitonic(nums: number[], size: number, key: number) {\r\n    let peak_index = this.findPeakElement(nums, 0, size - 1);\r\n    if (key > nums[peak_index]) return -1;\r\n    else if (key == nums[peak_index]) return peak_index;\r\n    else {\r\n      let temp = this.ascendingBinarySearch(nums, 0, peak_index - 1, key);\r\n      if (temp != -1) {\r\n        return temp;\r\n      }\r\n      // Search in right of k\r\n      temp = this.descendingBinarySearch(nums, peak_index + 1, size - 1, key);\r\n      if (temp != -1) {\r\n        return temp;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  findPeakElement(list: Array<number>, lowIndex: number, highIndex: number) {\r\n    while (lowIndex < highIndex) {\r\n      let mid = (lowIndex + highIndex) / 2;\r\n      if (list[mid] > list[mid + 1]) highIndex = mid;\r\n      else lowIndex = mid + 1;\r\n    }\r\n    return lowIndex;\r\n  }\r\n}\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":16,"column":20,"nodeType":"33","messageId":"34","endLine":16,"endColumn":22},{"ruleId":"31","severity":1,"message":"32","line":31,"column":20,"nodeType":"33","messageId":"34","endLine":31,"endColumn":22},{"ruleId":"31","severity":1,"message":"32","line":41,"column":18,"nodeType":"33","messageId":"34","endLine":41,"endColumn":20},{"ruleId":"31","severity":1,"message":"35","line":44,"column":16,"nodeType":"33","messageId":"34","endLine":44,"endColumn":18},{"ruleId":"31","severity":1,"message":"35","line":49,"column":16,"nodeType":"33","messageId":"34","endLine":49,"endColumn":18},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]